
// the Editor represents document and wraps its three views of the same document: htmlview, sourceview (HTML), markdown 

class Editor : Element 
{
  this var htmlview;
  this var textview;
  this var markview;

  this var htmlChanged = false;
  this var textChanged = false;
  this var markChanged = false;

  var current; // current Editor, note it is a class variable.  
  var documentToolbar;
  var fileToolbar;
  var observers = [];

  function attached() {
    this.$append(<htmlarea.htmlview/>
                 <plaintext.sourceview/>
                 <plaintext.mdview/>);
    this.htmlview = this[0];
    this.textview = this[1];
    this.markview = this[2];

    if(!documentToolbar) {
      documentToolbar = self.$(toolbar.document);
      fileToolbar = self.$(toolbar.file);
      assert documentToolbar && fileToolbar;
      bindToolbars();
    }
  }

  property caption(v) {
    get { return URL.parse(this.docUrl).name || "{new}"; }
  }

  property isNew(v) { 
    get return URL.parse(this.docUrl).protocol != "file";
  }

  function loadDocument(fileUrl, folderUrl) {
    this.docUrl = fileUrl;
    this.dirUrl = folderUrl;
    if( !this.isNew )
      return this.htmlview.loadDocument(fileUrl);
    else
      return this.htmlview.emptyDocument();
  }

  function loadString(data) {
    //this.docUrl = fileUrl;
    //this.dirUrl = folderUrl;
    //if( !this.isNew )
      return this.htmlview.html = data;
    //else
    //  return this.htmlview.emptyDocument();
  }

  function saveDocument(saveAs = false) {
    if(this.isNew)
      saveAs = true;
    var url = this.docUrl;
    if( saveAs ) { 
      //url
      var proposedFn = this.isNew ? ((Folder.current.path || System.path(#USER_DOCUMENTS)) + "/new") 
                                  : URL.toPath(url);
      //debug path: proposedFn;
      url = view.selectFile(#save, "HTML Files (*.htm,*.html,*.xhtml)|*.htm;*.html;*.xhtml|All Files (*.*)|*.*","xhtml", proposedFn);
      if(!url) 
        return false;
      // TODO-DO-DO: reparent URLs, please!
      this.postEvent("doc-name-change",false);  
      this.htmlview.setDocumentUrl(this.docUrl = url);      
    }
    if(this.viewMode == #source)  
    {
      var r = this.textview.getContent();
      this.htmlview.sourceToContent(r[0], this.docUrl, r[1], r[2]);
    } else if(this.viewMode == #markdown) {
      var r = this.markview.getHTMLContent();
      this.htmlview.sourceToContent(r[0], this.docUrl, r[1], r[2]);
    }

    if(!this.htmlview.saveDocument(this.docUrl)) {
      view.msgbox(#alert, "Cannot save document:" + URL.toPath(this.docUrl));
      return false;
    }
    this.htmlChanged = false;
    this.textChanged = false;
    this.postEvent("doc-modification-state-change",false);
    return true;
  }

  function persistContent() {
    if( this.isChanged ) {
      var bytes;
      if(this.viewMode == #source)  
        bytes = Bytes.fromString(this.textview.value,"utf-8");
      else 
        bytes = this.htmlview.contentToBytes();
      return { url: this.docUrl, folderUrl: this.folderUrl, content: bytes.compress().toString("base64") };
    }
    else 
      return { url: this.docUrl };
  }
  function restoreContent(def) {
    if( def.content ) {
      this.htmlview.bytesToContent(Bytes.fromString(def.content,"base64").decompress(), def.url);
      this.docUrl = def.url;
      this.folderUrl = def.folderUrl;
      this.htmlChanged = true;
    }
    else
      this.loadDocument(def.url, def.folderUrl);
  }

  property isChanged(v) {
    get return this.htmlChanged || this.textChanged;
    set assert false;
  }

  // htmlarea has or has not undos  
  event contentmodification $(htmlarea) (evt) {
    const wasChanged = this.isChanged;
    this.htmlChanged = evt.reason != 0;
    const nowChanged = this.isChanged;
    if( wasChanged != nowChanged )
      this.postEvent("doc-modification-state-change",nowChanged);
  }

  // plaintext has or has not undos
  event contentmodification $(plaintext.sourceview) (evt) {
    const wasChanged = this.isChanged;
    this.textChanged = evt.reason != 0;
    const nowChanged = this.isChanged;
    if( wasChanged != nowChanged )
      this.postEvent("doc-modification-state-change",nowChanged);
  }

  event contentmodification $(plaintext.markview) (evt) {
    const wasChanged = this.isChanged;
    this.markChanged = evt.reason != 0;
    const nowChanged = this.isChanged;
    if( wasChanged != nowChanged )
      this.postEvent("doc-modification-state-change",nowChanged);
  }


  event change $(htmlarea) (evt) { this.postEvent("doc-changed"); }
  event change $(plaintext.sourceview) (evt) { this.postEvent("doc-changed"); }
  event change $(plaintext.markview) (evt) { this.postEvent("doc-changed"); }

  property viewMode(v) {
    var currentMode = #wysiwyg;
    if( this.textview.isVisible ) currentMode = #source;
    else if(this.markview.isVisible ) currentMode = #markdown;

    get return currentMode;
    set {
      var cel;
      if( v === currentMode )
        return;
      switch(v) {
        case #source: {
          var r = this.htmlview.contentToSource(); // r[0] - text, r[1] - anchor pos, r[2] - caret pos 
          this.attributes["mode"] = "source";
          this.textview.setText(r[0],r[1],r[2]);
          cel = this.textview;
        } break;
        case #wysiwyg: {
          this.textChanged = false;
          var r = currentMode == #source ? this.textview.getContent() : this.markview.getHTMLContent();
          this.attributes["mode"] = "wysiwyg";        
          this.htmlview.sourceToContent(r[0], this.docUrl, r[1], r[2]);
          cel = this.htmlview;
        } break;
        case #markdown: {
          this.markview.setTextFrom(this.htmlview);
          this.attributes["mode"] = "markdown";
          cel = this.markview;
        } break;
      }
      cel.state.focus = true;
      this.postEvent("doc-view-mode-change",v);
    }
  }

  event show-source { 
    this.viewMode = #source;
  }

  event show-wysiwyg {
    this.viewMode = #wysiwyg; 
  }

  event show-markdown {
    this.viewMode = #markdown; 
  }

  property currentView(v) {
    get switch(this.viewMode) {
        case #source: return this.textview;
        case #markdown : return this.markview;
        default : return this.htmlview;
      }
  }

  property folderUrl(v) {
    get {
      if(this.dirUrl) 
        return this.dirUrl;
      else 
        return (this.docUrl /~ "/") + "/";
    } set {
      this.dirUrl = v;
    }
  }

  property docUrl(v) {
    get return this._url || "unknown:new"; 
    set { this._url = v; assert typeof v == #string; }
  }

  //this var docUrl = "unknown:new";  

  // set this editor as current one
  function activate() {
    current = this;
    this.state.current = true;
    this.postEvent("doc-activated");
    this.currentView.state.focus = true;
    var path = URL.toPath(this.docUrl);
    setCaption(path);
  }

  // class function
  function bindToolbars() 
  {
    const buttonSource = self.$(button#source);
    const buttonMarkdown = self.$(button#markdown);
    const buttonSave = self.$(button#save-file);
    const buttonSaveAs = self.$(button#save-file-as);
    assert buttonSource && buttonSave && buttonMarkdown;
    
    buttonSource << event change { current.viewMode = this.state.checked ? #source : #wysiwyg; }
    buttonMarkdown << event change { current.viewMode = this.state.checked ? #markdown : #wysiwyg;  }

    buttonSave << event click (evt) { current.saveDocument(); }
    buttonSaveAs << event click (evt) { current.saveDocument(true); }

    function updateModeButtons() {
      const vmod = current.viewMode;
      buttonMarkdown.state.checked = vmod == #markdown;
      buttonSource.state.checked = vmod == #source;
      buttonSource.state.disabled = buttonMarkdown.state.checked;
      buttonMarkdown.state.disabled = buttonSource.state.checked;
    }

    self << event doc-view-mode-change { updateModeButtons();}
    
    self << event doc-activated {
      updateModeButtons();
      buttonSave.state.disabled = !current.isChanged; 
    }

    self << event doc-modification-state-change {
      buttonSave.state.disabled = !current.isChanged;  
    }

  }

}