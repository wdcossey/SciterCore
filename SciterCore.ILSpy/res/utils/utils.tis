
//const reURL = /((?:https?:\/\/)([a-zA-Z-]+)(\.[a-zA-Z-]+)([-\/\w\.\?#&=%\(\)]*)\/?)(\s|$)/i; 
//const reMail = /(([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]{2,6}))(\s|$)/i;

// draws connector line between elementFrom and elementTo
class Connector {

  this var from = null; // from DOM element
  this var to = null; // to DOM element
  this var style =  { // connector style:
                      //fromCap   :#circle, 
                      //fromSize  :4dip,
                      //fromPoint :5, // center-center
                      toCap     :#arrow,
                      toSize    :5dip 8dip,
                      toPoint   :5 // center-center
                   };
  
  this var width = 1dip;
  this var color = color(255,0,0);

  function this(elFrom, elTo) {
    this.from = elFrom;
    this.to = elTo;
  }

  function render(canvas, gfx) {
    assert canvas;  
    assert this.from; 
    assert this.to;

    var (canvasX,canvasY) = canvas.box(#position,#inner,#view);  
    var (fromX,fromY,fromW,fromH) = this.from.box(#rectw,#border,#view);  
    var (toX,toY,toW,toH) = this.to.box(#rectw,#border,#view);
    fromX -= canvasX; // relative to the canvas we are in.
    fromY -= canvasY;
    toX -= canvasX;
    toY -= canvasY;    

    var color = this.from.style.variable("connector-color") || this.color;
    
    gfx.lineWidth(this.width)
       .lineColor(color)
       .connector( fromX,fromY,fromW,fromH,toX,toY,toW,toH,this.style );
  }  
}

class ConnectorsCanvas : Element 
{

  this var connectors = [];    

  function addConnector(elFrom, elTo) { 

    if( this.connectors.length == 0 )
      this.paintForeground = this.paint;

    var con = new Connector(elFrom, elTo);
    this.connectors.push(con);
    this.refresh();
    return con;
  }

  function removeConnector(con) { 
    this.connectors.removeByValue(con);
    this.refresh();
    if( this.connectors.length == 0 )
      this.paintForeground = null;
  }

  function paint(gfx) {
    var i = 0;
    while( i < this.connectors.length ) {
      var con = this.connectors[i];
      if( !con.from.root || !con.to.root ) {
        this.connectors.remove(i); // either element was removed from the DOM
        continue;
      }
      con.render(this,gfx);
      ++i;
    }
    if( this.connectors.length == 0 )
      this.paintForeground = null;
  }
}

class ConnectedLabel : Element {
  this var to;
  this var connector;
  var canvas;
  function attached() {
    if(!canvas) {
      if( self instanceof ConnectorsCanvas )
        canvas = self;
      else 
        canvas = self.parent.root; // doc in frame , getting 'self' of its host document 
    }
    assert canvas;
    var selector = this.attributes["with"];
    this.to = self.select(selector) || canvas.select(selector);
    assert this.to;
  }
  function detached() {
    if(this.connector)
      canvas.removeConnector(this.connector);
  }

  event mouseenter { this.connector = canvas.addConnector(this,this.to); }
  event mouseleave { canvas.removeConnector(this.connector); }
}
